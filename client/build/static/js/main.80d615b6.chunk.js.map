{"version":3,"sources":["store/project.js","socket.js","history.js","store/user.js","store/index.js","store/name.js","components/Login.js","components/NameEntry.js","components/Popup.js","components/SingleProject.js","App.js","serviceWorker.js","index.js"],"names":["setProject","project","type","SET_PROJECT","getAllProjects","dispatch","a","axios","get","data","GET_ALL_PROJECTS","projects","console","error","socket","io","window","location","origin","on","log","history","createBrowserHistory","defaultUser","getUser","user","UPDATE_NAME","store","rootReducer","combineReducers","name","state","action","middleware","applyMiddleware","thunkMiddleware","createLogger","collapsed","createStore","connect","closePopup","handleSubmit","evt","preventDefault","formName","target","email","value","password","method","post","res","push","dispatchOrHistoryErr","auth","props","href","response","handleChange","sessionStorage","setItem","updateName","align","onClick","Popup","className","this","React","Component","SingleProject","numStudents","id","users","rgb","i","r","Math","floor","random","style","backgroundColor","isSelected","selectProject","map","student","key","timer","App","showPopup","togglePopup","bind","handleSelect","setState","chooseProject","emit","alert","getProjects","setTimeout","clearTimeout","Fragment","length","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80d615b6.chunk.js","sourcesContent":["import axios from 'axios'\n// ACTION TYPES\n\nimport {SET_PROJECT, GET_PROJECT, GET_ALL_PROJECTS} from './index'\n\n// ACTION CREATORS\n\n\nexport function setProject (project) {\n  const action = { type: SET_PROJECT, project };\n  return action;\n}\n\nexport function gotAllProjects (projects) {\n    const action = { type: GET_ALL_PROJECTS, projects };\n    return action;\n  }\n//thunks\n\nexport const getAllProjects = () => {\n    return async dispatch => {\n      try {\n        const { data } = await axios.get('/api/projects');\n        //will return the array of students set on projects\n        dispatch(gotAllProjects(data));\n      } catch (err) {\n        console.error(err);\n      }\n    };\n  };\nexport const selectProject = (project) => {\n  return async dispatch => {\n      const { data } = await axios.post(`/api/projects/select`, project);\n      dispatch(setProject(data));\n  };\n};\n// REDUCER\nexport default function project (state = [], action) {\n\n  switch (action.type) {\n\n    case SET_PROJECT:\n      return action.project;\n    case GET_ALL_PROJECTS:\n      return action.projects;\n    default:\n      return state;\n  }\n\n}\n","import io from 'socket.io-client';\n\nconst socket = io(window.location.origin);\n\nsocket.on('connect', () => {\n  console.log('Connected!');\n});\n\nexport default socket;\n","import {createMemoryHistory, createBrowserHistory} from 'history';\n\nconst history =\n    process.env.NODE_ENV === 'test'\n        ? createMemoryHistory()\n        : createBrowserHistory()\n\nexport default history","import axios from 'axios'\nimport history from '../history'\n\n/**\n * ACTION TYPES\n */\nconst GET_USER = 'GET_USER'\nconst REMOVE_USER = 'REMOVE_USER'\n\n/**\n * INITIAL STATE\n */\nconst defaultUser = {}\n\n/**\n * ACTION CREATORS\n */\nconst getUser = user => ({type: GET_USER, user})\nconst removeUser = () => ({type: REMOVE_USER})\n\n/**\n * THUNK CREATORS\n */\nexport const me = () => async dispatch => {\n    try {\n        const res = await axios.get('/auth/me')\n        dispatch(getUser(res.data || defaultUser))\n    } catch (err) {\n        console.error(err)\n    }\n}\n\nexport const auth = (email, password, method) => async dispatch => {\n    let res\n    try {\n        res = await axios.post(`/auth/${method}`, {email, password})\n    } catch (authError) {\n        return dispatch(getUser({error: authError}))\n    }\n\n    try {\n        dispatch(getUser(res.data))\n        history.push('/home')\n    } catch (dispatchOrHistoryErr) {\n        console.error(dispatchOrHistoryErr)\n    }\n}\n\nexport const logout = () => async dispatch => {\n    try {\n        await axios.post('/auth/logout')\n        dispatch(removeUser())\n        history.push('/login')\n    } catch (err) {\n        console.error(err)\n    }\n}\n\n/**\n * REDUCER\n */\nexport default function(state = defaultUser, action) {\n    switch (action.type) {\n        case GET_USER:\n            return action.user\n        case REMOVE_USER:\n            return defaultUser\n        default:\n            return state\n    }\n}","import {createStore, applyMiddleware, combineReducers} from 'redux';\nimport name from './name';\nimport project, { getAllProjects } from './project';\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger';\nimport socket from '../socket';\n\nexport const UPDATE_NAME = 'UPDATE_NAME';\nexport const SET_PROJECT = 'SET_PROJECT';\nexport const GET_ALL_PROJECTS = 'GET_ALL_PROJECTS'\n\nsocket.on('select-project', () => {\n  store.dispatch(getAllProjects());\n});\n\nconst rootReducer = combineReducers({\n  name,\n  project,\n})\n\nconst middleware = \n  applyMiddleware(thunkMiddleware, createLogger({ collapsed: true })\n);\n\nconst store = createStore(\n    rootReducer, middleware\n  );\n  \nexport default store;\nexport * from './name';\nexport * from './project';\nexport * from './user';","\nimport {UPDATE_NAME} from './index'\n\nexport function updateName (name) {\n    const action = { type: UPDATE_NAME, name };\n    sessionStorage.setItem('name', name)\n    return action;\n  }\n\n\nexport default function name (state = 'student', action) {\n\n    switch (action.type) {\n  \n      case UPDATE_NAME:\n        return action.name;\n      default:\n        return state;\n    }\n  }","import React from 'react'\nimport {connect} from 'react-redux'\nimport {auth} from '../store'\n\n/**\n * COMPONENT\n */\nconst LoginForm = props => {\n    const {error} = props\n\n    return (\n        <form>\n            <div>\n                <button><a href=\"/auth/google\">Log in with Google</a></button>\n                {error && error.response && <div> {error.response.data} </div>}\n            </div>\n\n        </form>\n\n    )\n}\n\n/**\n * CONTAINER\n *   Note that we have two different sets of 'mapStateToProps' functions -\n *   one for Login, and one for Signup. However, they share the same 'mapDispatchToProps'\n *   function, and share the same Component. This is a good example of how we\n *   can stay DRY with interfaces that are very similar to each other!\n */\nconst mapLogin = state => {\n    return {\n        name: 'login',\n        error: state.user?.error,\n        closePopup: true\n    }\n}\n\n\nconst mapDispatch = dispatch => {\n    return {\n        handleSubmit(evt) {\n            evt.preventDefault()\n            const formName = evt.target.name\n            const email = evt.target.email.value\n            const password = evt.target.password.value\n            dispatch(auth(email, password, formName))\n        }\n    }\n}\n\nexport const Login = connect(mapLogin, mapDispatch)(LoginForm)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateName } from '../store';\nimport {Login} from './Login';\n\nfunction NameEntry (props) {\n\n  // const { handleChange } = props;\n\n  return (\n    // <form className=\"form-inline\">\n    //   <label htmlFor=\"name\">Enter your name: </label>\n    //   <input\n    //     type=\"text\"\n    //     name=\"name\"\n    //     placeholder=\"First and Last Name\"\n    //     className=\"form-control\"\n    //     onChange={handleChange}\n    //   />\n<div align=\"center\">\n  <h3>Black History Month Project</h3>\n  <p>Instructions: Choose one person to research in honor of black history month.</p>\n  <p>First come first serve.</p>\n  <p>Try to choose someone you know, since you will be researching, creating, and presenting a project on this person.</p>\n  <p>If you aren't here, Ms. L will choose for you.</p>\n  <button onClick={props.closePopup}>OK!</button>\n\n</div>\n\n    // </form>\n     \n  );\n}\n\n\nconst mapDispatchToProps = function (dispatch) {\n  return {\n    handleChange (evt) {\n      dispatch(updateName(evt.target.value));\n    }\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(NameEntry);\n","import React from 'react';\nimport NameEntry from './NameEntry';\n\nclass Popup extends React.Component {\n  render() {\n    return (\n      <div className='popup'>\n        <div className='popup_inner'>\n          <NameEntry closePopup={this.props.closePopup} />\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Popup;","import React, {Component} from 'react';\n\nclass SingleProject extends Component {\n\n    render(){\n        let {numStudents, name, id, users} = this.props\n        let rgb = []\n        for (let i = 0; i < 3; i++) {\n          let r = Math.floor(Math.random() * 256)\n          rgb.push(r)\n        }\n        return (\n            <div className=\"project-swatch\"\n                 style={{backgroundColor: !numStudents ? `rgb(${rgb})` : 'black'}}\n                 onClick={!this.props.isSelected ? () => this.props.selectProject(id, numStudents, name) : null}>\n                <h2>{name}</h2>\n                <div className='group'>\n                {numStudents === 1 ?\n                users.map((student, i) => {\n                    return (\n                    <p key={i}>{student.name}</p>\n                    )\n                })\n                : null}\n                </div>\n            </div>\n           \n        )\n    }\n    \n}\n\nexport default SingleProject","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport Popup from '../src/components/Popup'\nimport './App.css';\nimport SingleProject from './components/SingleProject';\nimport {getAllProjects, me, selectProject} from './store'\nimport socket from '../src/socket'\n\nlet timer = null;\nclass App extends Component {\n  constructor (){\n    super()\n    this.state = {\n      isSelected: false,\n      showPopup: true\n    }\n    this.togglePopup = this.togglePopup.bind(this)\n    this.handleSelect = this.handleSelect.bind(this)\n  }\n  togglePopup() {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n\n  handleSelect(id, numStudents, name){\n    if (numStudents < 1) {\n      this.props.chooseProject({id: id, name: 'test'})\n      socket.emit('select-project', {name: 'test', project: name, numStudents: numStudents})\n      alert(`You chose well! Your topic for Black History Month is: ${name}`)\n      this.setState({\n          isSelected: true\n      })\n    } else {\n      alert('The group is now full! Choose another!')\n    }\n  }\n\n  // componentDidUpdate(prevProps, prevState){\n  //     if (prevState.name !== sessionStorage.getItem('name')){\n  //         this.setState({\n  //         name: sessionStorage.getItem('name')\n  //     })\n  //   }\n  // }\n  \n  componentDidMount(){\n    this.props.getProjects()\n    socket.on('select-project', (data) => {\n      if (data.numStudents < 1){\n        timer = setTimeout(() => this.props.getProjects(), 3000)\n        \n      }\n       console.log(`${data.project} was chosen by ${data.name}`);\n   })\n  }\n  componentWillUnmount(){\n    clearTimeout(timer);\n  }\nrender() {\n    console.log(this.props.getUser())\n  return (\n    <React.Fragment>\n    {this.state.showPopup ?\n      <Popup closePopup={this.togglePopup}/>\n      : (<h1>Hi, {'test'}! Choose your BHM topic!</h1>)}\n\n    <div className=\"App\">\n      {this.props.projects.length ? this.props.projects.map((project) => {\n        return <SingleProject\n            key={project.id}\n            id={project.id}\n            student={this.state.name}\n            users={project.users}\n            name={project.name}\n            numStudents={project.numStudents}\n            isSelected={this.state.isSelected}\n            selectProject={this.handleSelect}\n            />\n      })\n    : 'Loading Project Name' }\n    </div>\n    </React.Fragment>\n  );\n}\n}\n\nconst mapStateToProps = state => ({\n  name: state.name,\n  projects: state.project\n})\nconst mapDispatchToProps = dispatch => ({\n  getUser: () => dispatch(me()),\n  getProjects: () => dispatch(getAllProjects()),\n  chooseProject: (project) => dispatch(selectProject(project))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from '../src/store'\nimport {Provider} from 'react-redux'\nimport history from './history'\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router history={history}>\n            <App />\n        </Router>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}