{"version":3,"sources":["store/project.js","socket.js","store/index.js","store/name.js","components/NameEntry.js","components/Popup.js","components/SingleProject.js","App.js","serviceWorker.js","index.js"],"names":["setProject","project","type","SET_PROJECT","getAllProjects","dispatch","a","axios","get","data","GET_ALL_PROJECTS","projects","console","error","socket","io","window","location","origin","on","log","UPDATE_NAME","store","rootReducer","combineReducers","name","state","action","middleware","applyMiddleware","thunkMiddleware","createLogger","collapsed","createStore","connect","handleChange","evt","sessionStorage","setItem","updateName","target","value","props","getItem","className","align","htmlFor","placeholder","readOnly","onChange","onClick","closePopup","Popup","this","React","Component","SingleProject","numStudents","id","users","rgb","i","r","Math","floor","random","push","style","backgroundColor","isSelected","selectProject","map","student","key","timer","App","showPopup","togglePopup","bind","handleSelect","setState","length","find","it","alert","chooseProject","emit","prevProps","prevState","getProjects","setTimeout","clearTimeout","Fragment","post","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8868509.chunk.js","sourcesContent":["import axios from 'axios'\n// ACTION TYPES\n\nimport {SET_PROJECT, GET_PROJECT, GET_ALL_PROJECTS} from './index'\n\n// ACTION CREATORS\n\n\nexport function setProject (project) {\n  const action = { type: SET_PROJECT, project };\n  return action;\n}\n\nexport function gotAllProjects (projects) {\n    const action = { type: GET_ALL_PROJECTS, projects };\n    return action;\n  }\n//thunks\n\nexport const getAllProjects = () => {\n    return async dispatch => {\n      try {\n        const { data } = await axios.get('/api/projects');\n        //will return the array of students set on projects\n        dispatch(gotAllProjects(data));\n      } catch (err) {\n        console.error(err);\n      }\n    };\n  };\nexport const selectProject = (project) => {\n  return async dispatch => {\n      const { data } = await axios.post(`/api/projects/select`, project);\n      dispatch(setProject(data));\n  };\n};\n// REDUCER\nexport default function project (state = [], action) {\n\n  switch (action.type) {\n\n    case SET_PROJECT:\n      return action.project;\n    case GET_ALL_PROJECTS:\n      return action.projects;\n    default:\n      return state;\n  }\n\n}\n","import io from 'socket.io-client';\n\nconst socket = io(window.location.origin);\n\nsocket.on('connect', () => {\n  console.log('Connected!');\n});\n\nexport default socket;\n","import {createStore, applyMiddleware, combineReducers} from 'redux';\nimport name from './name';\nimport project, { getAllProjects } from './project';\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger';\nimport socket from '../socket';\n\nexport const UPDATE_NAME = 'UPDATE_NAME';\nexport const SET_PROJECT = 'SET_PROJECT';\nexport const GET_ALL_PROJECTS = 'GET_ALL_PROJECTS'\n\nsocket.on('select-project', () => {\n  store.dispatch(getAllProjects());\n});\n\nconst rootReducer = combineReducers({\n  name,\n  project,\n})\n\nconst middleware = \n  applyMiddleware(thunkMiddleware, createLogger({ collapsed: true })\n);\n\nconst store = createStore(\n    rootReducer, middleware\n  );\n  \nexport default store;\nexport * from './name';\nexport * from './project';","\nimport {UPDATE_NAME} from './index'\n\nexport function updateName (name) {\n    const action = { type: UPDATE_NAME, name };\n    sessionStorage.setItem('name', name)\n    return action;\n  }\n\n\nexport default function name (state = 'student', action) {\n\n    switch (action.type) {\n  \n      case UPDATE_NAME:\n        return action.name;\n      default:\n        return state;\n    }\n  }","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateName } from '../store';\n\nfunction NameEntry (props) {\n\n  const { handleChange } = props;\n\n  const name = sessionStorage.getItem('name');\n\n  return (\n    <form className=\"form-inline\" align={'center'} >\n      <label htmlFor=\"name\">Enter your first and last name: </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"First and Last Name\"\n        value={name}\n        readOnly={name}\n        className=\"form-control\"\n        onChange={!name ? handleChange : null}\n      />\n        <h3>Black History Month Project</h3>\n        <p>Instructions: Choose one person to research in honor of black history month.</p>\n        <p>First come first serve.</p>\n        <p>Try to choose someone you know, since you will be researching, creating, and presenting a project on this person.</p>\n        <p>If you aren't here, Ms. L will choose for you.</p>\n        <button onClick={props.closePopup}>OK!</button>\n    </form>\n     \n  );\n}\n\n\nconst mapDispatchToProps = function (dispatch) {\n  return {\n    handleChange (evt) {\n      dispatch(updateName(evt.target.value));\n    }\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(NameEntry);\n","import React from 'react';\nimport NameEntry from './NameEntry';\n\nclass Popup extends React.Component {\n  render() {\n    return (\n      <div className='popup'>\n        <div className='popup_inner'>\n          <NameEntry closePopup={this.props.closePopup} />\n       \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Popup;","import React, {Component} from 'react';\n\nclass SingleProject extends Component {\n\n    render(){\n        const {numStudents, name, id, users} = this.props,\n            rgb = []\n        for (let i = 0; i < 3; i++) {\n            let r = Math.floor(Math.random() * 256);\n            if (r - rgb[i] < 10) {r += 20;}\n            rgb.push(r);\n        }\n        return (\n            <div className=\"project-swatch\"\n                 style={{backgroundColor: !numStudents ? `rgb(${rgb})` : 'black'}}\n                 onClick={!this.props.isSelected ? () => this.props.selectProject(id, numStudents, name) : null}>\n                <h2>{name}</h2>\n                <div className='group'>\n                {numStudents === 1 ?\n                users.map((student, i) => {\n                    return (\n                    <p key={i}>{student.name}</p>\n                    )\n                })\n                : null}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SingleProject","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport Popup from '../src/components/Popup'\nimport './App.css';\nimport SingleProject from './components/SingleProject';\nimport {getAllProjects, selectProject} from './store'\nimport socket from '../src/socket'\n\nlet timer = null;\nclass App extends Component {\n  constructor (){\n    super()\n    this.state = {\n      isSelected: false,\n      showPopup: true,\n      name: 'student',\n    }\n    this.togglePopup = this.togglePopup.bind(this)\n    this.handleSelect = this.handleSelect.bind(this)\n  }\n  togglePopup() {\n    this.setState({\n      showPopup: !sessionStorage.getItem('name') || sessionStorage.getItem('name').length < 5\n    });\n  }\n\n  handleSelect(id, numStudents, name){\n    if (this.props.projects.find(it => it.users[0] && it.users[0].name === sessionStorage.getItem('name'))) {\n      alert('You already chose a project');\n      return;\n    }\n    if (numStudents < 1) {\n      this.props.chooseProject({id: id, name: this.state.name})\n      socket.emit('select-project', {name: this.state.name, project: name, numStudents: numStudents})\n      alert(`You chose well! Your topic for Black History Month is: ${name}`)\n      this.setState({\n          isSelected: true\n      })\n    } else {\n      alert('The project is already taken! Choose another!')\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState){\n      if (prevState.name !== sessionStorage.getItem('name')){\n          this.setState({\n          name: sessionStorage.getItem('name')\n      })\n    }\n  }\n  \n  componentDidMount(){\n    this.props.getProjects()\n    socket.on('select-project', (data) => {\n      if (data.numStudents < 1){\n        timer = setTimeout(() => this.props.getProjects(), 1000)\n      }\n       console.log(`${data.project} was chosen by ${data.name}`)\n   })\n  }\n  componentWillUnmount(){\n    clearTimeout(timer);\n  }\nrender() { \n  return (\n    <React.Fragment>\n    {this.state.showPopup ?\n      <Popup closePopup={this.togglePopup} />\n      : (<h1>Hi, {this.state.name}! Choose your BHM topic</h1>)}\n\n    <div className=\"App\">\n      {this.props.projects.length ? this.props.projects.map((project) => {\n        return <SingleProject\n            key={project.id}\n            id={project.id}\n            student={this.state.name}\n            users={project.users}\n            name={project.name}\n            numStudents={project.numStudents}\n            isSelected={this.state.isSelected}\n            selectProject={this.handleSelect}\n            />\n      })\n    : 'Loading Project Name' }\n    </div>\n    </React.Fragment>\n  );\n}\n}\n\nconst mapStateToProps = state => ({\n  name: state.name,\n  projects: state.project\n})\nconst mapDispatchToProps = dispatch => ({\n  getProjects: () => dispatch(getAllProjects()),\n  chooseProject: (project) => dispatch(selectProject(project))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from '../src/store'\nimport {Provider} from 'react-redux'\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}