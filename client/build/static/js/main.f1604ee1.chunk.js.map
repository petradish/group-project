{"version":3,"sources":["socket.js","store/project.js","store/index.js","store/name.js","components/NameEntry.js","components/Popup.js","components/SingleProject.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","window","location","origin","on","console","log","setProject","project","type","SET_PROJECT","getAllProjects","dispatch","a","async","axios","get","data","GET_ALL_PROJECTS","projects","error","UPDATE_NAME","GET_PROJECT","store","rootReducer","combineReducers","name","state","action","middleware","applyMiddleware","thunkMiddleware","createLogger","collapsed","createStore","connect","handleChange","evt","sessionStorage","setItem","updateName","target","value","props","className","htmlFor","placeholder","onChange","onClick","closePopup","Popup","this","React","Component","SingleProject","numStudents","id","users","rgb","i","r","Math","floor","random","push","class","style","backgroundColor","isSelected","selectProject","map","student","App","showPopup","togglePopup","bind","handleSelect","connectToServer","setState","chooseProject","emit","alert","prevProps","prevState","getItem","fetch","getProjects","Fragment","length","key","getProjectUsers","projectId","post","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1604ee1.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst socket = io(window.location.origin);\n\nsocket.on('connect', () => {\n  console.log('Connected!');\n});\n\nexport default socket;\n","import axios from 'axios'\nimport socket from '../socket';\n// ACTION TYPES\n\nimport {SET_PROJECT, GET_PROJECT, GET_ALL_PROJECTS} from './index'\n\n// ACTION CREATORS\n\n\nexport function setProject (project) {\n  const action = { type: SET_PROJECT, project };\n  return action;\n}\nexport function gotProject (project) {\n  const action = { type: GET_PROJECT, project };\n  return action;\n}\nexport function gotAllProjects (projects) {\n    const action = { type: GET_ALL_PROJECTS, projects };\n    return action;\n  }\n//thunks\nexport const getProject = (projectId) => {\n  return async dispatch => {\n    try {\n      const { data } = await axios.get(`/api`);\n      //will return the array of students set on projects\n      dispatch(gotProject(data));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n};\nexport const getAllProjects = () => {\n    return async dispatch => {\n      try {\n        const { data } = await axios.get('/api/projects');\n        //will return the array of students set on projects\n        dispatch(gotAllProjects(data));\n      } catch (err) {\n        console.error(err);\n      }\n    };\n  };\nexport const selectProject = (project) => {\n  return async dispatch => {\n      const { data } = await axios.post(`/api/projects/select`, project);\n      dispatch(setProject(data));\n      socket.emit('select-project', data);\n  };\n};\n// REDUCER\nexport default function project (state = [], action) {\n\n  switch (action.type) {\n\n    case SET_PROJECT:\n      return action.project;\n    case GET_PROJECT:\n      return action.project;\n    case GET_ALL_PROJECTS:\n      return action.projects;\n    default:\n      return state;\n  }\n\n}\n","import {createStore, applyMiddleware, combineReducers} from 'redux';\nimport name from './name';\nimport project, { getAllProjects } from './project';\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger';\nimport socket from '../socket';\n\nexport const UPDATE_NAME = 'UPDATE_NAME';\nexport const SET_PROJECT = 'SET_PROJECT';\nexport const GET_PROJECT = 'GET_PROJECT';\nexport const GET_ALL_PROJECTS = 'GET_ALL_PROJECTS'\n\nsocket.on('select-project', () => {\n  store.dispatch(getAllProjects());\n});\n\nconst rootReducer = combineReducers({\n  name,\n  project,\n})\n\nconst middleware = \n  applyMiddleware(thunkMiddleware, createLogger({ collapsed: true })\n);\n\nconst store = createStore(\n    rootReducer, middleware\n  );\n  \nexport default store;\nexport * from './name';\nexport * from './project';","\nimport {UPDATE_NAME} from './index'\n\nexport function updateName (name) {\n    const action = { type: UPDATE_NAME, name };\n    sessionStorage.setItem('name', name)\n    return action;\n  }\n\n\nexport default function name (state = 'student', action) {\n\n    switch (action.type) {\n  \n      case UPDATE_NAME:\n        return action.name;\n      default:\n        return state;\n    }\n  }","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateName } from '../store';\n\nfunction NameEntry (props) {\n\n  const { handleChange } = props;\n\n  return (\n    <form className=\"form-inline\">\n      <label htmlFor=\"name\">Enter your name:</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"First and Last Name\"\n        className=\"form-control\"\n        onChange={handleChange}\n      />\n      <button onClick={props.closePopup}>Go!</button>\n      <p>Instructions: After you click \"Go!\", Choose your project topic before someone else does! \n        First 4 to select a country will form the group. Think carefully before selecting. When you click the topic, it will be your final choice!\n        </p>\n    </form>\n     \n  );\n}\n\n\nconst mapDispatchToProps = function (dispatch) {\n  return {\n    handleChange (evt) {\n      dispatch(updateName(evt.target.value));\n    }\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(NameEntry);\n","import React from 'react';\nimport NameEntry from './NameEntry';\n\nclass Popup extends React.Component {\n  render() {\n    return (\n      <div className='popup'>\n        <div className='popup_inner'>\n          <NameEntry closePopup={this.props.closePopup} />\n       \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Popup;","import React, {Component} from 'react';\n// import {connect} from 'react-redux'\n// import {getProject, selectProject} from '../store'\n\nclass SingleProject extends Component {\n\n    render(){\n        let {numStudents, name, id, users} = this.props\n        let rgb = []\n        for (let i = 0; i < 3; i++) {\n          let r = Math.floor(Math.random() * 256)\n          rgb.push(r)\n        }\n        return (\n            <div class=\"project-swatch\" style={{backgroundColor: `rgb(${rgb})`}} onClick={!this.props.isSelected ? () => this.props.selectProject(id, numStudents, name) : null} >\n                <h2>{name}</h2>\n                <div class='group'>\n                {numStudents===4 ? \n                users.map(student => {\n                    return (\n                    <p>{student.name}</p>\n                    )\n                })\n                : null}\n                </div>\n            </div>\n           \n        )\n    }\n    \n}\n// const mapStateToProps = state => ({\n//     // projects: state.project\n//   })\n//   const mapDispatchToProps = dispatch => ({\n   \n//   })\n\n//   export default connect(mapStateToProps, mapDispatchToProps)(SingleProject);\nexport default SingleProject","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport Popup from '../src/components/Popup'\nimport './App.css';\n// import io from 'socket.io-client'\nimport SingleProject from './components/SingleProject';\nimport {getAllProjects, selectProject, getProject} from './store'\n// const socket = io()\nimport socket from '../src/socket'\n\n\nclass App extends Component {\n  constructor (){\n    super()\n    this.state = {\n      isSelected: false,\n      showPopup: true,\n      name: 'student',\n    }\n    this.togglePopup = this.togglePopup.bind(this)\n    this.handleSelect = this.handleSelect.bind(this)\n    this.connectToServer = this.connectToServer.bind(this)\n  }\n  togglePopup() {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n\n  handleSelect(id, numStudents, name){\n    if (numStudents < 4) {\n      this.props.chooseProject({id: id, name: this.state.name})\n      socket.emit('select-project', {name: this.state.name, project: name})\n      alert(`You chose well! Let's see who else joins your group on ${name}`)\n      this.setState({\n          isSelected: true\n      })\n    } else {\n      alert('The group is now full! Choose another!')\n    }\n  }\n//   handleSelect(student, project, key){\n//     if (this.state.projects[key].students.length < 4){\n//       socket.emit('select-project', {\n//         student: student,\n//         project: project,\n//         key: key\n//       })\n//       alert(`You chose well! Let's see who else joins your group on ${project}`)\n//       this.setState({\n//         isSelected: true\n//       })\n//     } else {\n//       alert('The group is now full! Choose another!')\n//     }\n// }\n  componentDidUpdate(prevProps, prevState){\n      if (prevState.name !== sessionStorage.getItem('name')){\n          this.setState({\n          name: sessionStorage.getItem('name')\n      })\n    }\n  }\n  connectToServer(){\n    fetch('/ping')\n  }\n\n  componentDidMount(){\n    this.connectToServer()\n    this.props.getProjects()\n    socket.on('select-project', (data) => {\n       console.log(`${data.project} was chosen by ${data.name}`)\n   })\n  }\n  \nrender() { \n  return (\n    <React.Fragment>\n    {this.state.showPopup ?\n      <Popup\n       closePopup={this.togglePopup}\n      />\n      : (<h1>\n       Hi, {this.state.name}! Choose your topic quickly!</h1>)\n    }  \n    \n    <div className=\"App\">\n      {this.props.projects.length ? this.props.projects.map((project) => {\n        return <SingleProject key={project.id} id={project.id} student={this.state.name} users={project.users} name={project.name} numStudents={project.numStudents} isSelected={this.state.isSelected} selectProject={this.handleSelect}/>\n      })\n    : 'Loading Project Name' }\n    </div>\n    </React.Fragment>\n  );\n}\n}\n\nconst mapStateToProps = state => ({\n  name: state.name,\n  projects: state.project\n})\nconst mapDispatchToProps = dispatch => ({\n  getProjects: () => dispatch(getAllProjects()),\n  getProjectUsers:(projectId) => dispatch(getProject(projectId)),\n  chooseProject: (project) => dispatch(selectProject(project))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from '../src/store'\nimport {Provider} from 'react-redux'\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}